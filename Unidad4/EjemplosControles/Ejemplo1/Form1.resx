<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAUAgIAAAAAAIAC0CAAAVgAAAEBAAAAAACAA+QMAAAoJAAAwMAAAAAAgAO8CAAADDQAAICAAAAAA
        IADpAQAA8g8AABAQAAAAACAAJgEAANsRAACJUE5HDQoaCgAAAA1JSERSAAAAgAAAAIAIBgAAAMM+YcsA
        AAAEZ0FNQQAAsY8L/GEFAAAIa0lEQVR4Xu2dV8gdRRiGf2MXRbBh7yIRLBcSUMGuiMQKUUNAMN4o3qjY
        sIBYsETUSy/sXYNYwAJeKAS8UFAE0YjdYI2C2Gv0fRKPyPqd8ez8Z3dmdr4XHvgZ4873zby7Z3Z2d2ZG
        miP2FA+JP50qeEDQ5/T9zFzxpbD+oTNcPheYYGbp3wVOfXAlMP+DUw9moVMPZqFTD2ahUw9moVMPZqFT
        D2ZhiF/E62KZkxX0CX1j9VkIs3AcV4n9xG5iJycrdhf0zQ3C6rtxmIUWF4t1hCtvrSuuFFYfWpiFTX4S
        uMtVhuirn4XVl03MwiYviZ2FqwztKl4RVl82MQubPC92EK4yRF/RZ1ZfNjELm7gBypIboHK5ASqXG6By
        uQEqlxugcrkBKpcboHK5ASqXG6ByDd4Ax4nFa/7MQsQyf82fWWjQBjhNfCqIi0fUqUUMxEJMxJaDBmuA
        BeJjsUoQ1/ficpFK1E0MxEJMHwliTK1BGuAI8ZVoxvajOE/0Leqk7mY8KwWxptTgDMALDv/3vtvpYm3R
        taiDuqwYRhBryhdoBmWAA8Skb7csEl2LOqy6mxAzsafQYAxwovhOWDGN4yzRlTi2Vec4iJ0c+tYgDLBQ
        fCKseELw2XNX4thWnSHIgVz6VPEGOFmsEKPR/qQwSJwnuhLHtgaiIciBXMipLxVtgIPFN8KKIwSj731F
        16KOr4UVQwhyIrc+VKwBaNxJB3wjOMM+FIeKvnSYiLlCkVsfJi3SAJwdbTv/D7FcnCD6FnVSNzFYsY2D
        HLu+EhRnAH4fYy7774qTRCpRNzFYsYUg1y7HBEUZgBEyl1Or3hAsbHW0SC1iiFlki5y7ujsoxgDcI3Ob
        1Pa39DOR06dqxNL2FpGcyb2LeYIiDMAsWdtJHqCh9xG5icHdF8KKOQRtMO0Zw+wN0ObjxRGcMe+Jw0Wu
        4iHQ+yLm7mCaV7SsDUAjtV3IgAZ9S6QY7bcVMRJrWxPQJtN6ipitAU4RbWfSgDO/hM4fiViJ2colBG0z
        jfcJsjRA7GifAV/Ol/1xIuaYZwe88DLbN4uyMwDv8NGR1rFD8JpVjgO+SUXsbfPmp4O8abNYZWWA/UXM
        4kWcPX1Mm3atmFtEYGBI28UoGwOQ/K/COuY4mFp9RxwlhiJyIaeYaeOYu4MsDHCMaNv5o9F+ipcouhY5
        xd4d0JZtlNwAp4qY6VFGzseLoYrcPhBW7iGYYOIOalIlNQAj2JjRPtOifT0vT6lDRMyAmLsDTqxJlMwA
        x4qY6VB+KoYw4JtU5Nr25xEYTNLG/6ekVwBWE2072IGnRR+vdacWOZKr1QYhaFPadhIlNQC6WbSd64fH
        xNZiqCI3crRyD0Fb0qaTKrkB0BJhHSsEl0X2sWEt4qGJnMgt5tJPW7ZRFgZAlwnreCF+EPeIIZmAhZzv
        FeRm5RyCNmyrbAzA7925wjpmCD64vE9sI0oXOZDL6CPSNtB2MeOibAyA1hMXCuu4IZgAeVTw/5cqYieH
        mKlw2iw296wMMNK14jdhHT/EU2IDUZqImditnELQRrTVbJSlAdAtIuZseERsK0rRdoKYrVxC0Da00WyV
        rQFQ2x0tgNugUgaGxMiAL+Y2mLaZhrI2ALpEWPWE4OXJu8QuIlcR290iZsBHm0xL2RuAbU1i7w44u7YS
        uYmYiC12tE+bTEvZGwCR8GiBpTYwkcLIei2Ri4iFmGImeWiDaXY+KsIAI10vYhqOKdWNRWoRw+PCijEE
        OZN7FyrKAIiRb4wJ7hfbi1Si7geFFVsIcp3GaH+cijMAuk5YdYdglS4GhinuDqiTutlRzYotBLl2qSIN
        gC4SVv0huDu4U7B5Yl+iLuqM+bSNHLtWsQZg6jPm7oCHLJyNm4mutblgTiLmwQ659TG1XawBELuTXiqs
        OEIwhcrvcddihi9mSpuc+tp5tWgDjHSjiJk2fkh0cYvIMZcKq84Q5EAufWoQBkCMlH8XVkzjeEZ08fCI
        Y3Jsq85xEHuXo/1xGowB0DXCismCmbgunxxuKKjDqtuC2FNoUAZAFwgrrn9zm9hCdC3qoC4rhn9DzKk0
        OAOsL1id24oNbhdbir7EvP8dwooFiJWYU2lwBkBzxBWiGdsTgktz36JO6m7GQ4zEmlKDNMBIN4nRs/bn
        RMozjbqJgViIidhy0KANgHhH/kmRw/uCmIBY2ry337UGbwCUQ+ePlFMsqAoDuMbLDVC53ACVyw1QudwA
        lcsNULncAJXLDVC53ACVyw1QuaZugBfEjsJVhuirF4XVl03MwiYsXryXcJUh+oo+s/qyiVloUeKS7bXq
        SGH1oYVZaMFmBkNYs2fo4vLfZmdTszAEu3SeIVjP3skD1iA+U7CcrNVnIcxCpx7MQqcezEKnHsxCpx7M
        QqcezEKnHqK2MHGGAVv0rN6Lpu0XuE75sMbByWL117QsUsi2ZtY/dIbH24Klav75kpo/eIAwr0DYaOph
        YSXaJdRJ3VZMuTNXdPkZfa/aSNwqrE7qEuqkbldiuQEqlxugcrkBMhIDi8WC3bH6gmXblgurk7qEOqnb
        iqkraNusB288m+bFEavBnNlD284XWWpvEbNjqNMO2pi2zkos0ORTyv1BW/exItpEYrEk9sWzAnW6gzZP
        sTjWfxSzrq8zHWj7pDpffCus4Jzuoe3pgyRaIFYIKzCnP+gD+qJX7SGeFVZATv+wiDUbVPciZr+uFlYg
        Tjrok15mJidZuNlJQ+cLVJ8jfLInX+ibs0UnOkj4NG/+rBQHiqlqU7FMrBJWpU4+0Ef01SZiKmId3JjN
        EZ200GezXsMYFy0R/rtfHvQZfRd9JWBD40XCf/fLhfHAQhG1XR174b8mrAM75fCq2Fm01svCOqBTHvRl
        K70prAM55fKGaGhm5i/bOJsPdKFxxwAAAABJRU5ErkJggolQTkcNChoKAAAADUlIRFIAAABAAAAAQAgG
        AAAAqmlx3gAAAARnQU1BAACxjwv8YQUAAAOwSURBVHhe7Zs7ixRBFIUXURADcyPfgf4ARVRUMBRBxEAQ
        RXxlBiqCBgaKqKgIYuC/2FhTE41EwVTwESmI7/frfLs2DM3pnaqu6namew587FLb99xbd6erumd6pqS1
        4k9PYe72D33CDvYJO9gn7GCfsIM7xOKOsVu4udpBArom5uTmagcnDRBd06QBws3VDk4aILqm1huwTKye
        /TVJeCyd/TVJrTZgvXguvoptDNQUsXg8E+sYSFBrDdgiHovfAq+XYqeIFTHE4oEXnnjXVSsN2CAeiWLy
        BU8FV5eh4lhiBj3wxJscddR4A1YJii5PHj6LYyJUHEtM2QdvcpArVo02YL74IpwX45dErK6Kb6LKk5wx
        aqwB/DeqJs9/8YaoK2LdKwHIGfNKaKQBnI/lc7Xgo7giUoUHXi4HuUPXhOwNYEV2Cx68F2dFLuGFZzlP
        sTCG7A5ZG8A+P7jVDUKhp8RCkUt44VnVBGqhprmUrQFc4b0QbvIfxBmRc/KF8OSV4E4HauHCi9qqlKUB
        iwRXZi7mk7gsmhY5yOVqYGGkRqfkBqwRVYsRK/V10ZbIVbXzcJpQa1nJDXgg3LFwQbSti8LVAvdFWckN
        2Cd+Cnf8NdG2yOlqoUZqLSu5AWi7cMezCN0WbYlcbhEGanTK0gC0SbiY7+KWaFrkIJergdqqlK0BiLu1
        qkvU82KByC088XY5qWXY3WbWBqAD4pVw8bmvBfDC0+WiBmoZpuwNQIfFG+E8zolcwsvlIDc1hKiRBqC9
        wnlAyp1gITycN5A7VI01AG0VzueXSNkdiMXDeZMzRo02AG0WzuuHuCliRQyxzpNcsWq8AWiX4Iao7Mcq
        fVSEimPdLoM3OeqolQagg2Jwd3gnWMFjtkaOJYbYwgdPvOuqtQagQ+Kt4CV8WtS5LiCGWDzwwjNFrTYA
        7RFsUbFvXg6KWDzwSlXrDUDz/v1MUQ4P9F8aMEqaNEC4udrBSQNE1zRpgHBztYO9bwA3IF1T1U2VHewT
        drBP2ME+UfmWVh94LWYeMtgv+OSnCZ4IlzwEYp1nDvjwZKVoXDze5iYXQuqjcVm1RPDAYiw87uYmFwKx
        znMY1JpVG8W0uFeDh8JNLgRinecwqJWas4ivlmHqChxlqHnma3Ep4s2I46LqY7BRhpqpPekNFZ7V5f04
        l2AcoPbazyp36Rul0afCCuGMxpnlIkicM3eFMxln7oig9eCkqHpGd5xhTsxtTp0Q47zoDYO5MUerI2Ic
        t7tYmCNzlaam/gIbCnpwChwTJQAAAABJRU5ErkJggolQTkcNChoKAAAADUlIRFIAAAAwAAAAMAgGAAAA
        VwL5hwAAAARnQU1BAACxjwv8YQUAAAKmSURBVGhD1Zm7ilRREEXbFyKIiIEI5uZmBmJoLIiYGYiBHzFm
        Jvofhj4QBMHEF5gqiOADNFIDcwUR3WucC4fa1X3P6W6mz12wcKa6qs62p+f2nZmZ2JJ/JyrZ0wemZFqc
        kmlxSlrhsOyVIzLm9ULnWF4rdI7ltULnWF4rdI7ltUIjJ+Tl/x82wQyzrVheKzTyTTJ3a/uzOuhlhtlW
        yqzohUqOybeynN1+ax8h3rqwg121lLPohQoOyJ8yzn6SY9AT59jFzhrirBdG4KDXMs7dl/vkGPQ8kHGe
        nTX/iTjnhQXwpY7P/B/5QrbCDLPlLnaPvZzKfvTCAuJrHh/JQ7IVZpiN+zhjEbHfCwlc7oarzSDPHgFW
        hR3xK8FZ8y6xZR96IeGLjH3P5DLPfIQdz2Xc/1lmxD4vFByXH2TsuSvXzT0Zz3kvyVASe7xQcEbGx/lG
        2yvXDTuzSzMZSuLjXghckbHnsVw37IzncHYk9ngh4YKM32gf5UG5KuxgV7mbszgzo+xDL8yBhbH3qVwV
        dsS988JD7PXCArKX0yu57PsAs3Ff9rIpif1eGOGcjDPcBrSS3Y6we4w444UKrsk490TW3gvRG+fZWUOc
        80IlZ2Wc/S7HoCfOsauWOOuFBq7KYe6NrPmVDD30DnPsaGGYG/RCI+clb0Atl1R6mWG2FctrhSXYv/Nv
        C8vMgOW1QudYXit0juW1QudYXit0juWNhdOyV8gW81rht+QS16Nki3mtMDXtPn9Kkn12Sb6U71b0q8wO
        yaQ329EimS/KtXFdZmEz6d0VTsoblT6UWdhMerMdmWRYilMyO3wTkqWJPfKOzJZtQrKQqZqbMlu0SclU
        xW2ZLehBsi2En1d/yGy4B8k29+fuo/KXzAZ7koxkNbLf/ffqzt8QZrN/KeFTxpq21QgAAAAASUVORK5C
        YIKJUE5HDQoaCgAAAA1JSERSAAAAIAAAACAIBgAAAHN6evQAAAAEZ0FNQQAAsY8L/GEFAAABoElEQVRY
        R+2WPUoEQRCFR8Gf0BMYCB7ASDEz9QIGookIhoKgiZmBbOQxvII3MDAxNzERTEw0E0Xft1JLO1s93T3M
        zib74IO161XV25ndWSvpZ8q4h30yenEvrnuCXWMBKPQlds0CtAqwJdb/XrqihielVgGOBb4HscFBTZxR
        w4O3ScUBLsSXwJcTAC89MRUFYNCHwPMsUrcAD156YiGyA3Ap7Z3DkkgJj/np9W5HMsCc2BNW413lLDfh
        tSsBzGKmKRngQNg597XpssdEj30mgJmmZIBLYed3YlWUih56bQ4zTckA8+JUWI1n96LIFd7wec8sZpqS
        AdCCOBdWfxW5wmt9zGBWqKwApoH4FHiexIqIiRoevPTQ66koALoR3wLfLQcRUcODl56YigOgK/Em9od/
        +aKGB2+TWgVAuyL8MNVFDU9KrQN0pVkANwBPrZOeCJ+QoxfTojqqHfTJoRh+dZYLCH8p61DzemK4X+k1
        4Q3vAmY3alu8CK+5C5jNDleb4lF4jV3CDnaN6UyE//9NCnaw6592xLvwGiYBu7Szqn4BY/LZc/+AhbMA
        AAAASUVORK5CYIKJUE5HDQoaCgAAAA1JSERSAAAAEAAAABAIBgAAAB/z/2EAAAAEZ0FNQQAAsY8L/GEF
        AAAA3UlEQVQ4T5WSOw4BURSGpxBLmFarUCqUdkElCtagV1BYiERvMXagEBKaKST837nuZB73Ttwv+ZIz
        5/HHYzLxkYW8JsoNt1bsZD9Rbri1tB5FItxwGww4yq0rDWp6VaIBZ8lHG9iTg5oeM08rAE/SvlcEZuz4
        /VrAQt7kTMZgxg67rQBYyYdc21MdeszYgWAAzOVbbuzJQU2PmScaABM5cqVBTa9KZ8A/lAFPuZTDRPkt
        XtJekKb8VbznVemFdkumcv/zIJsB9Pyc3RpjeZHNo5jscmPk8i5Di13qJsu/va9pCtplDzwAAAAASUVO
        RK5CYII=
</value>
  </data>
</root>